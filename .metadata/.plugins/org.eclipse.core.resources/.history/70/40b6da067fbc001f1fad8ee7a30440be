<?xml version="1.0" encoding="UTF-8"?>
<api context="/application/maxim/v1/order-details" name="MaximNBNOrderDetailInboundService" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="GET">
        <inSequence>
            <log level="custom">
                <property name="PreProxyFlow" value="Request received in Pre-Proxy Flow"/>
            </log>
            <!-- Additional Pre-Proxy Policies -->
            <!--  Logging Request Details -->
            <log level="custom">
                <property expression="get-property('REST_FULL_REQUEST_PATH')" name="RequestURI"/>
                <property expression="get-property('axis2', 'HTTP_METHOD')" name="HTTPMethod"/>
                <property expression="get-property('transport', 'Authorization')" name="Authorization"/>
            </log>
            <!-- Extract and Log OAuth Token -->
            <property expression="get-property('transport', 'Authorization')" name="AuthToken" scope="default" type="STRING"/>
            <log level="custom">
                <property expression="get-property('AuthToken')" name="Auth Token"/>
            </log>
            <!--  Spike Arrest -->
            <throttle id="Spike-Arrest" onReject="fault">
                <policy>
                    <wsp:Policy wsu:id="WSO2MediatorThrottlingPolicy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                        <throttle:MediatorThrottleAssertion xmlns:throttle="http://www.wso2.org/products/wso2commons/throttle">
                            <throttle:MaximumConcurrentAccess>10</throttle:MaximumConcurrentAccess>
                            <wsp:Policy>
                                <throttle:ID throttle:type="IP">other</throttle:ID>
                                <wsp:Policy>
                                    <throttle:Allow/>
                                </wsp:Policy>
                            </wsp:Policy>
                        </throttle:MediatorThrottleAssertion>
                    </wsp:Policy>
                </policy>
                <onAccept/>
            </throttle>
            <!-- Verify Access Token -->
            <call>
                <endpoint>
                    <http method="post" uri-template="https://oauth-server-url/introspect">
                        <suspendOnFailure>
                            <initialDuration>2000</initialDuration>
                            <progressionFactor>1.5</progressionFactor>
                            <maximumDuration>30000</maximumDuration>
                        </suspendOnFailure>
                        <markForSuspension>
                            <retriesBeforeSuspension>3</retriesBeforeSuspension>
                        </markForSuspension>
                    </http>
                </endpoint>
            </call>
            <!-- Extract Session Token and Headers -->
            <property expression="json-eval($.sessionToken)" name="SessionToken" scope="default" type="STRING"/>
            <property expression="get-property('trsnsport', 'Content-Type')" name="Content-Type" scope="default" type="STRING"/>
            <log level="custom">
                <property expression="get-property('SessionToken')" name="SessionToken"/>
            </log>
            <property expression="json-eval($.OrderNumber)" name="OrderNumber" scope="default" type="STRING"/>
            <log level="custom">
                <property expression="get-property('OrderNumber')" name="OrderNumber"/>
            </log>
            <!-- Transformation JSON To XML -->
            <payloadFactory media-type="xml">
                <format>
                    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                        <soapenv:Header>
                            <UsernameToken xmlns="http://siebel.com/webservices">{Username}</UsernameToken>
                            <PasswordText xmlns="http://siebel.com/webservices">{Password}</PasswordText>
                            <SessionType xmlns="http://siebel.com/webservices">Stateless</SessionType>
                        </soapenv:Header>
                        <soapenv:Body>
                            <asi:Query_Input xmlns:asi="http://siebel.com/asi">
                                <nbn:ListOfNbnsmbcodireq xmlns:nbn="http://www.siebel.com/xml/NBNSMBCodiReq">
                                    <!-- from 0 to unbounded -->
                                    <nbn:OrderEntry-Orders>
                                        <!-- optional -->
                                        <nbn:TRN>{TRN}</nbn:TRN>
                                        <!-- optional -->
                                        <nbn:OOTOrderId>{OOTOrderId}</nbn:OOTOrderId>
                                        <!-- optional -->
                                        <nbn:OrderNumber>{OrderNumber}</nbn:OrderNumber>
                                    </nbn:OrderEntry-Orders>
                                </nbn:ListOfNbnsmbcodireq>
                            </asi:Query_Input>
                        </soapenv:Body>
                    </soapenv:Envelope>
                </format>
                <args>
                    <arg evaluator="xml" expression="get-property('OrderNumber')"/>
                </args>
            </payloadFactory>
            <!--  Key-Value Map Operations -->
            <property expression="fn:lookup('conf:/kvm/global-config', 'quota')" name="QuotaLimit" scope="default" type="STRING"/>
            <log level="custom">
                <property expression="get-property('QuotaLimit')" name="Quota"/>
            </log>
            <!-- Cache Lookup  -->
            <cache collector="false" maxMessageSize="5000" timeout="300">
                <onCacheHit>
                    <log level="custom">
                        <property name="Cache" value="Cache Hit - Returning Cached Response"/>
                    </log>
                    <send/>
                </onCacheHit>
                <protocol type="HTTP">
                    <methods>*</methods>
                    <headersToExcludeInHash/>
                    <headersToIncludeInHash/>
                    <responseCodes>.*</responseCodes>
                    <enableCacheControl>false</enableCacheControl>
                    <includeAgeHeader>false</includeAgeHeader>
                    <hashGenerator>org.wso2.carbon.mediator.cache.digest.HttpRequestHashGenerator</hashGenerator>
                </protocol>
                <implementation maxSize="1000"/>
            </cache>
            <cache collector="true" scope="per-host"/>
            <!-- Assign Default Error Response -->
            <!--  Send Request to Backend-->
            <send>
                <endpoint key="MAXIM-TargetEndpoint"/>
            </send>
        </inSequence>
        <outSequence>
            <log level="custom">
                <property name="Flow" value="Response sent from Post-Proxy Flow"/>
            </log>
            <!-- Additional Post-Proxy Policies -->
            <xslt key="file:conf/remove-namespaces.xslt"/>
            <!--  Transform XML Response to JSON -->
            <payloadFactory media-type="json">
                <format>
            	{
            	 "OrderNumber": "$1",
            	 "Status": "$2",
            	 "Message": "Order details retrieved successfully"
            	</format>
                <args/>
            </payloadFactory>
        </outSequence>
        <faultSequence>
            <log level="custom">
                <property name="Error" value="Error occurred in API execution"/>
            </log>
            <send/>
        </faultSequence>
    </resource>
</api>
